<?php
/**
 * IoMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Members API
 *
 * The PassKit Members API lets you manage your membership programs and passes for Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 1.0-rc
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * IoMessage Class Doc Comment
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IoMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ioMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'protocol' => '\PkIo\Model\IoPassProtocol',
'companyId' => 'string',
'classId' => 'string',
'uuid' => 'string',
'status' => '\PkIo\Model\IoMessageStatus',
'warning' => 'string',
'imageId' => 'int',
'title' => 'string',
'localizedTitle' => '\PkIo\Model\IoLocalizedString',
'content' => 'string',
'localizedContent' => '\PkIo\Model\IoLocalizedString',
'startDate' => '\DateTime',
'endDate' => '\DateTime',
'filter' => '\PkIo\Model\IoFilter',
'recordsMatchingSegment' => 'int',
'recordsSuccessfullyUpdate' => 'int',
'recordsFailedToUpdate' => 'int',
'created' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'protocol' => null,
'companyId' => null,
'classId' => null,
'uuid' => null,
'status' => null,
'warning' => null,
'imageId' => 'int64',
'title' => null,
'localizedTitle' => null,
'content' => null,
'localizedContent' => null,
'startDate' => 'date-time',
'endDate' => 'date-time',
'filter' => null,
'recordsMatchingSegment' => 'int64',
'recordsSuccessfullyUpdate' => 'int64',
'recordsFailedToUpdate' => 'int64',
'created' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'protocol' => 'protocol',
'companyId' => 'companyId',
'classId' => 'classId',
'uuid' => 'uuid',
'status' => 'status',
'warning' => 'warning',
'imageId' => 'imageId',
'title' => 'title',
'localizedTitle' => 'localizedTitle',
'content' => 'content',
'localizedContent' => 'localizedContent',
'startDate' => 'startDate',
'endDate' => 'endDate',
'filter' => 'filter',
'recordsMatchingSegment' => 'recordsMatchingSegment',
'recordsSuccessfullyUpdate' => 'recordsSuccessfullyUpdate',
'recordsFailedToUpdate' => 'recordsFailedToUpdate',
'created' => 'created'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'protocol' => 'setProtocol',
'companyId' => 'setCompanyId',
'classId' => 'setClassId',
'uuid' => 'setUuid',
'status' => 'setStatus',
'warning' => 'setWarning',
'imageId' => 'setImageId',
'title' => 'setTitle',
'localizedTitle' => 'setLocalizedTitle',
'content' => 'setContent',
'localizedContent' => 'setLocalizedContent',
'startDate' => 'setStartDate',
'endDate' => 'setEndDate',
'filter' => 'setFilter',
'recordsMatchingSegment' => 'setRecordsMatchingSegment',
'recordsSuccessfullyUpdate' => 'setRecordsSuccessfullyUpdate',
'recordsFailedToUpdate' => 'setRecordsFailedToUpdate',
'created' => 'setCreated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'protocol' => 'getProtocol',
'companyId' => 'getCompanyId',
'classId' => 'getClassId',
'uuid' => 'getUuid',
'status' => 'getStatus',
'warning' => 'getWarning',
'imageId' => 'getImageId',
'title' => 'getTitle',
'localizedTitle' => 'getLocalizedTitle',
'content' => 'getContent',
'localizedContent' => 'getLocalizedContent',
'startDate' => 'getStartDate',
'endDate' => 'getEndDate',
'filter' => 'getFilter',
'recordsMatchingSegment' => 'getRecordsMatchingSegment',
'recordsSuccessfullyUpdate' => 'getRecordsSuccessfullyUpdate',
'recordsFailedToUpdate' => 'getRecordsFailedToUpdate',
'created' => 'getCreated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['companyId'] = isset($data['companyId']) ? $data['companyId'] : null;
        $this->container['classId'] = isset($data['classId']) ? $data['classId'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['warning'] = isset($data['warning']) ? $data['warning'] : null;
        $this->container['imageId'] = isset($data['imageId']) ? $data['imageId'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['localizedTitle'] = isset($data['localizedTitle']) ? $data['localizedTitle'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['localizedContent'] = isset($data['localizedContent']) ? $data['localizedContent'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['recordsMatchingSegment'] = isset($data['recordsMatchingSegment']) ? $data['recordsMatchingSegment'] : null;
        $this->container['recordsSuccessfullyUpdate'] = isset($data['recordsSuccessfullyUpdate']) ? $data['recordsSuccessfullyUpdate'] : null;
        $this->container['recordsFailedToUpdate'] = isset($data['recordsFailedToUpdate']) ? $data['recordsFailedToUpdate'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets protocol
     *
     * @return \PkIo\Model\IoPassProtocol
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param \PkIo\Model\IoPassProtocol $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets companyId
     *
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['companyId'];
    }

    /**
     * Sets companyId
     *
     * @param string $companyId companyId
     *
     * @return $this
     */
    public function setCompanyId($companyId)
    {
        $this->container['companyId'] = $companyId;

        return $this;
    }

    /**
     * Gets classId
     *
     * @return string
     */
    public function getClassId()
    {
        return $this->container['classId'];
    }

    /**
     * Sets classId
     *
     * @param string $classId the higher level class id for the protocol.
     *
     * @return $this
     */
    public function setClassId($classId)
    {
        $this->container['classId'] = $classId;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \PkIo\Model\IoMessageStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \PkIo\Model\IoMessageStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets warning
     *
     * @return string
     */
    public function getWarning()
    {
        return $this->container['warning'];
    }

    /**
     * Sets warning
     *
     * @param string $warning warning of any errors that may have occurred.
     *
     * @return $this
     */
    public function setWarning($warning)
    {
        $this->container['warning'] = $warning;

        return $this;
    }

    /**
     * Gets imageId
     *
     * @return int
     */
    public function getImageId()
    {
        return $this->container['imageId'];
    }

    /**
     * Sets imageId
     *
     * @param int $imageId Optional Image ID; for the Main Image that will be shown in Google Pay (Google Pay only; no image is shown for Apple Wallet).
     *
     * @return $this
     */
    public function setImageId($imageId)
    {
        $this->container['imageId'] = $imageId;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title (summary) of the message.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets localizedTitle
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedTitle()
    {
        return $this->container['localizedTitle'];
    }

    /**
     * Sets localizedTitle
     *
     * @param \PkIo\Model\IoLocalizedString $localizedTitle localizedTitle
     *
     * @return $this
     */
    public function setLocalizedTitle($localizedTitle)
    {
        $this->container['localizedTitle'] = $localizedTitle;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content Content of the message (finer details).
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets localizedContent
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedContent()
    {
        return $this->container['localizedContent'];
    }

    /**
     * Sets localizedContent
     *
     * @param \PkIo\Model\IoLocalizedString $localizedContent localizedContent
     *
     * @return $this
     */
    public function setLocalizedContent($localizedContent)
    {
        $this->container['localizedContent'] = $localizedContent;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate Start date indicates when the message is shown on the pass.
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime $endDate End date indicates when the message is removed from the pass.
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return \PkIo\Model\IoFilter
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param \PkIo\Model\IoFilter $filter filter
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets recordsMatchingSegment
     *
     * @return int
     */
    public function getRecordsMatchingSegment()
    {
        return $this->container['recordsMatchingSegment'];
    }

    /**
     * Sets recordsMatchingSegment
     *
     * @param int $recordsMatchingSegment number of records this message will be sent to.
     *
     * @return $this
     */
    public function setRecordsMatchingSegment($recordsMatchingSegment)
    {
        $this->container['recordsMatchingSegment'] = $recordsMatchingSegment;

        return $this;
    }

    /**
     * Gets recordsSuccessfullyUpdate
     *
     * @return int
     */
    public function getRecordsSuccessfullyUpdate()
    {
        return $this->container['recordsSuccessfullyUpdate'];
    }

    /**
     * Sets recordsSuccessfullyUpdate
     *
     * @param int $recordsSuccessfullyUpdate number of records updated with this message.
     *
     * @return $this
     */
    public function setRecordsSuccessfullyUpdate($recordsSuccessfullyUpdate)
    {
        $this->container['recordsSuccessfullyUpdate'] = $recordsSuccessfullyUpdate;

        return $this;
    }

    /**
     * Gets recordsFailedToUpdate
     *
     * @return int
     */
    public function getRecordsFailedToUpdate()
    {
        return $this->container['recordsFailedToUpdate'];
    }

    /**
     * Sets recordsFailedToUpdate
     *
     * @param int $recordsFailedToUpdate number of records that failed updated with this message.
     *
     * @return $this
     */
    public function setRecordsFailedToUpdate($recordsFailedToUpdate)
    {
        $this->container['recordsFailedToUpdate'] = $recordsFailedToUpdate;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The date the message was created in the PassKit system.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
