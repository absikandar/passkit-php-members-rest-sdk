<?php
/**
 * MembersMember
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Members API
 *
 * The PassKit Members API lets you manage your membership programs and passes for Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 1.0-rc
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * MembersMember Class Doc Comment
 *
 * @category Class
 * @description Basic member information needs to be provided. Member information is deleted or rendered unusable once the member record is deleted.
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembersMember implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'membersMember';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'externalId' => 'string',
'groupingIdentifier' => 'string',
'tierId' => 'string',
'programId' => 'string',
'memberDetails' => '\PkIo\Model\IoPerson',
'memberMetaData' => 'map[string,string]',
'optOut' => 'bool',
'points' => 'float',
'secondaryPoints' => 'float',
'tierPoints' => 'int',
'expiryDate' => '\DateTime',
'status' => '\PkIo\Model\MembersMemberStatus',
'passOverrides' => '\PkIo\Model\IoPassOverrides',
'passMetaData' => '\PkIo\Model\IoMetadata',
'activeMessages' => '\PkIo\Model\IoMessage[]',
'notes' => '\PkIo\Model\IoNote[]',
'currentTierAwarded' => '\DateTime',
'currentTierExpires' => '\DateTime',
'created' => '\DateTime',
'updated' => '\DateTime',
'profileImage' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'externalId' => null,
'groupingIdentifier' => null,
'tierId' => null,
'programId' => null,
'memberDetails' => null,
'memberMetaData' => null,
'optOut' => 'boolean',
'points' => 'float',
'secondaryPoints' => 'float',
'tierPoints' => 'int64',
'expiryDate' => 'date-time',
'status' => null,
'passOverrides' => null,
'passMetaData' => null,
'activeMessages' => null,
'notes' => null,
'currentTierAwarded' => 'date-time',
'currentTierExpires' => 'date-time',
'created' => 'date-time',
'updated' => 'date-time',
'profileImage' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'externalId' => 'externalId',
'groupingIdentifier' => 'groupingIdentifier',
'tierId' => 'tierId',
'programId' => 'programId',
'memberDetails' => 'memberDetails',
'memberMetaData' => 'memberMetaData',
'optOut' => 'optOut',
'points' => 'points',
'secondaryPoints' => 'secondaryPoints',
'tierPoints' => 'tierPoints',
'expiryDate' => 'expiryDate',
'status' => 'status',
'passOverrides' => 'passOverrides',
'passMetaData' => 'passMetaData',
'activeMessages' => 'activeMessages',
'notes' => 'notes',
'currentTierAwarded' => 'currentTierAwarded',
'currentTierExpires' => 'currentTierExpires',
'created' => 'created',
'updated' => 'updated',
'profileImage' => 'profileImage'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'externalId' => 'setExternalId',
'groupingIdentifier' => 'setGroupingIdentifier',
'tierId' => 'setTierId',
'programId' => 'setProgramId',
'memberDetails' => 'setMemberDetails',
'memberMetaData' => 'setMemberMetaData',
'optOut' => 'setOptOut',
'points' => 'setPoints',
'secondaryPoints' => 'setSecondaryPoints',
'tierPoints' => 'setTierPoints',
'expiryDate' => 'setExpiryDate',
'status' => 'setStatus',
'passOverrides' => 'setPassOverrides',
'passMetaData' => 'setPassMetaData',
'activeMessages' => 'setActiveMessages',
'notes' => 'setNotes',
'currentTierAwarded' => 'setCurrentTierAwarded',
'currentTierExpires' => 'setCurrentTierExpires',
'created' => 'setCreated',
'updated' => 'setUpdated',
'profileImage' => 'setProfileImage'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'externalId' => 'getExternalId',
'groupingIdentifier' => 'getGroupingIdentifier',
'tierId' => 'getTierId',
'programId' => 'getProgramId',
'memberDetails' => 'getMemberDetails',
'memberMetaData' => 'getMemberMetaData',
'optOut' => 'getOptOut',
'points' => 'getPoints',
'secondaryPoints' => 'getSecondaryPoints',
'tierPoints' => 'getTierPoints',
'expiryDate' => 'getExpiryDate',
'status' => 'getStatus',
'passOverrides' => 'getPassOverrides',
'passMetaData' => 'getPassMetaData',
'activeMessages' => 'getActiveMessages',
'notes' => 'getNotes',
'currentTierAwarded' => 'getCurrentTierAwarded',
'currentTierExpires' => 'getCurrentTierExpires',
'created' => 'getCreated',
'updated' => 'getUpdated',
'profileImage' => 'getProfileImage'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['groupingIdentifier'] = isset($data['groupingIdentifier']) ? $data['groupingIdentifier'] : null;
        $this->container['tierId'] = isset($data['tierId']) ? $data['tierId'] : null;
        $this->container['programId'] = isset($data['programId']) ? $data['programId'] : null;
        $this->container['memberDetails'] = isset($data['memberDetails']) ? $data['memberDetails'] : null;
        $this->container['memberMetaData'] = isset($data['memberMetaData']) ? $data['memberMetaData'] : null;
        $this->container['optOut'] = isset($data['optOut']) ? $data['optOut'] : null;
        $this->container['points'] = isset($data['points']) ? $data['points'] : null;
        $this->container['secondaryPoints'] = isset($data['secondaryPoints']) ? $data['secondaryPoints'] : null;
        $this->container['tierPoints'] = isset($data['tierPoints']) ? $data['tierPoints'] : null;
        $this->container['expiryDate'] = isset($data['expiryDate']) ? $data['expiryDate'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['passOverrides'] = isset($data['passOverrides']) ? $data['passOverrides'] : null;
        $this->container['passMetaData'] = isset($data['passMetaData']) ? $data['passMetaData'] : null;
        $this->container['activeMessages'] = isset($data['activeMessages']) ? $data['activeMessages'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['currentTierAwarded'] = isset($data['currentTierAwarded']) ? $data['currentTierAwarded'] : null;
        $this->container['currentTierExpires'] = isset($data['currentTierExpires']) ? $data['currentTierExpires'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['profileImage'] = isset($data['profileImage']) ? $data['profileImage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tierId'] === null) {
            $invalidProperties[] = "'tierId' can't be null";
        }
        if ($this->container['programId'] === null) {
            $invalidProperties[] = "'programId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id assigned by PassKit to represent the member record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId This can be used to set the 'external' ID of the member (i.e. the member ID as it's being used in your system). If provided then this can be used to query & update members. This field will be treated as unique within the program, and cannot be updated at a later stage.
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets groupingIdentifier
     *
     * @return string
     */
    public function getGroupingIdentifier()
    {
        return $this->container['groupingIdentifier'];
    }

    /**
     * Sets groupingIdentifier
     *
     * @param string $groupingIdentifier Grouping Identifier can be used to group members under the same membership (i.e. couple).
     *
     * @return $this
     */
    public function setGroupingIdentifier($groupingIdentifier)
    {
        $this->container['groupingIdentifier'] = $groupingIdentifier;

        return $this;
    }

    /**
     * Gets tierId
     *
     * @return string
     */
    public function getTierId()
    {
        return $this->container['tierId'];
    }

    /**
     * Sets tierId
     *
     * @param string $tierId Indicates the ID of the tier this member is in.
     *
     * @return $this
     */
    public function setTierId($tierId)
    {
        $this->container['tierId'] = $tierId;

        return $this;
    }

    /**
     * Gets programId
     *
     * @return string
     */
    public function getProgramId()
    {
        return $this->container['programId'];
    }

    /**
     * Sets programId
     *
     * @param string $programId Indicates the ID of the program this member is in.
     *
     * @return $this
     */
    public function setProgramId($programId)
    {
        $this->container['programId'] = $programId;

        return $this;
    }

    /**
     * Gets memberDetails
     *
     * @return \PkIo\Model\IoPerson
     */
    public function getMemberDetails()
    {
        return $this->container['memberDetails'];
    }

    /**
     * Sets memberDetails
     *
     * @param \PkIo\Model\IoPerson $memberDetails memberDetails
     *
     * @return $this
     */
    public function setMemberDetails($memberDetails)
    {
        $this->container['memberDetails'] = $memberDetails;

        return $this;
    }

    /**
     * Gets memberMetaData
     *
     * @return map[string,string]
     */
    public function getMemberMetaData()
    {
        return $this->container['memberMetaData'];
    }

    /**
     * Sets memberMetaData
     *
     * @param map[string,string] $memberMetaData Any other meta fields for the member that are not covered in the protocol (i.e. you might want to captures sign-up location, and favorite coffee, for segmenting later on).
     *
     * @return $this
     */
    public function setMemberMetaData($memberMetaData)
    {
        $this->container['memberMetaData'] = $memberMetaData;

        return $this;
    }

    /**
     * Gets optOut
     *
     * @return bool
     */
    public function getOptOut()
    {
        return $this->container['optOut'];
    }

    /**
     * Sets optOut
     *
     * @param bool $optOut Indicates if the member opted out to receive marketing promotions (defaults to false).
     *
     * @return $this
     */
    public function setOptOut($optOut)
    {
        $this->container['optOut'] = $optOut;

        return $this;
    }

    /**
     * Gets points
     *
     * @return float
     */
    public function getPoints()
    {
        return $this->container['points'];
    }

    /**
     * Sets points
     *
     * @param float $points Points is formatted differently based on what is set on a program level. Program points.balance field can be set to: `int`, `double` or `money`.
     *
     * @return $this
     */
    public function setPoints($points)
    {
        $this->container['points'] = $points;

        return $this;
    }

    /**
     * Gets secondaryPoints
     *
     * @return float
     */
    public function getSecondaryPoints()
    {
        return $this->container['secondaryPoints'];
    }

    /**
     * Sets secondaryPoints
     *
     * @param float $secondaryPoints Secondary Points is formatted differently based on what is set on a program level. Program secondaryPoints.balance field can be set to: `int`, `double` or `money`. Field can be utilised if your program tracks two points, i.e. loyalty point balance, and pre-paid cash balance.
     *
     * @return $this
     */
    public function setSecondaryPoints($secondaryPoints)
    {
        $this->container['secondaryPoints'] = $secondaryPoints;

        return $this;
    }

    /**
     * Gets tierPoints
     *
     * @return int
     */
    public function getTierPoints()
    {
        return $this->container['tierPoints'];
    }

    /**
     * Sets tierPoints
     *
     * @param int $tierPoints Tier points can be set for programs that award tiers based on dedicated tier points. Tier points indicates the current amount of tier points someone has, and can be used by a member to check how many more tier points are required to switch to the next tier.
     *
     * @return $this
     */
    public function setTierPoints($tierPoints)
    {
        $this->container['tierPoints'] = $tierPoints;

        return $this;
    }

    /**
     * Gets expiryDate
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiryDate'];
    }

    /**
     * Sets expiryDate
     *
     * @param \DateTime $expiryDate Indicates when the membership card expires. When the expiry date hits, it will automatically gray out the barcode.
     *
     * @return $this
     */
    public function setExpiryDate($expiryDate)
    {
        $this->container['expiryDate'] = $expiryDate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \PkIo\Model\MembersMemberStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \PkIo\Model\MembersMemberStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets passOverrides
     *
     * @return \PkIo\Model\IoPassOverrides
     */
    public function getPassOverrides()
    {
        return $this->container['passOverrides'];
    }

    /**
     * Sets passOverrides
     *
     * @param \PkIo\Model\IoPassOverrides $passOverrides passOverrides
     *
     * @return $this
     */
    public function setPassOverrides($passOverrides)
    {
        $this->container['passOverrides'] = $passOverrides;

        return $this;
    }

    /**
     * Gets passMetaData
     *
     * @return \PkIo\Model\IoMetadata
     */
    public function getPassMetaData()
    {
        return $this->container['passMetaData'];
    }

    /**
     * Sets passMetaData
     *
     * @param \PkIo\Model\IoMetadata $passMetaData passMetaData
     *
     * @return $this
     */
    public function setPassMetaData($passMetaData)
    {
        $this->container['passMetaData'] = $passMetaData;

        return $this;
    }

    /**
     * Gets activeMessages
     *
     * @return \PkIo\Model\IoMessage[]
     */
    public function getActiveMessages()
    {
        return $this->container['activeMessages'];
    }

    /**
     * Sets activeMessages
     *
     * @param \PkIo\Model\IoMessage[] $activeMessages Indicates a personalized message is currently active for this pass.
     *
     * @return $this
     */
    public function setActiveMessages($activeMessages)
    {
        $this->container['activeMessages'] = $activeMessages;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return \PkIo\Model\IoNote[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param \PkIo\Model\IoNote[] $notes placeholder for notes.
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets currentTierAwarded
     *
     * @return \DateTime
     */
    public function getCurrentTierAwarded()
    {
        return $this->container['currentTierAwarded'];
    }

    /**
     * Sets currentTierAwarded
     *
     * @param \DateTime $currentTierAwarded The date the current tier was awarded.
     *
     * @return $this
     */
    public function setCurrentTierAwarded($currentTierAwarded)
    {
        $this->container['currentTierAwarded'] = $currentTierAwarded;

        return $this;
    }

    /**
     * Gets currentTierExpires
     *
     * @return \DateTime
     */
    public function getCurrentTierExpires()
    {
        return $this->container['currentTierExpires'];
    }

    /**
     * Sets currentTierExpires
     *
     * @param \DateTime $currentTierExpires The date the current tier expires.
     *
     * @return $this
     */
    public function setCurrentTierExpires($currentTierExpires)
    {
        $this->container['currentTierExpires'] = $currentTierExpires;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The date the member was created in the PassKit system.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The date the member was last updated in the PassKit system.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets profileImage
     *
     * @return string
     */
    public function getProfileImage()
    {
        return $this->container['profileImage'];
    }

    /**
     * Sets profileImage
     *
     * @param string $profileImage Optional field that holds the member profile image. Can either be an image URL or base64 image string.
     *
     * @return $this
     */
    public function setProfileImage($profileImage)
    {
        $this->container['profileImage'] = $profileImage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
