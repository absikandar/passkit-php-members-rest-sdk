<?php
/**
 * IoImageIds
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Members API
 *
 * The PassKit Members API lets you manage your membership programs and passes for Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 1.0-rc
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * IoImageIds Class Doc Comment
 *
 * @category Class
 * @description This manages images by id
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IoImageIds implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ioImageIds';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'icon' => 'string',
'logo' => 'string',
'appleLogo' => 'string',
'hero' => 'string',
'eventStrip' => 'string',
'strip' => 'string',
'thumbnail' => 'string',
'background' => 'string',
'footer' => 'string',
'security' => 'string',
'privilege' => 'string',
'airlineAlliance' => 'string',
'personalization' => 'string',
'banner' => 'string',
'message' => 'string',
'profile' => 'string',
'appImage' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'icon' => null,
'logo' => null,
'appleLogo' => null,
'hero' => null,
'eventStrip' => null,
'strip' => null,
'thumbnail' => null,
'background' => null,
'footer' => null,
'security' => null,
'privilege' => null,
'airlineAlliance' => null,
'personalization' => null,
'banner' => null,
'message' => null,
'profile' => null,
'appImage' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'icon' => 'icon',
'logo' => 'logo',
'appleLogo' => 'appleLogo',
'hero' => 'hero',
'eventStrip' => 'eventStrip',
'strip' => 'strip',
'thumbnail' => 'thumbnail',
'background' => 'background',
'footer' => 'footer',
'security' => 'security',
'privilege' => 'privilege',
'airlineAlliance' => 'airlineAlliance',
'personalization' => 'personalization',
'banner' => 'banner',
'message' => 'message',
'profile' => 'profile',
'appImage' => 'appImage'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'icon' => 'setIcon',
'logo' => 'setLogo',
'appleLogo' => 'setAppleLogo',
'hero' => 'setHero',
'eventStrip' => 'setEventStrip',
'strip' => 'setStrip',
'thumbnail' => 'setThumbnail',
'background' => 'setBackground',
'footer' => 'setFooter',
'security' => 'setSecurity',
'privilege' => 'setPrivilege',
'airlineAlliance' => 'setAirlineAlliance',
'personalization' => 'setPersonalization',
'banner' => 'setBanner',
'message' => 'setMessage',
'profile' => 'setProfile',
'appImage' => 'setAppImage'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'icon' => 'getIcon',
'logo' => 'getLogo',
'appleLogo' => 'getAppleLogo',
'hero' => 'getHero',
'eventStrip' => 'getEventStrip',
'strip' => 'getStrip',
'thumbnail' => 'getThumbnail',
'background' => 'getBackground',
'footer' => 'getFooter',
'security' => 'getSecurity',
'privilege' => 'getPrivilege',
'airlineAlliance' => 'getAirlineAlliance',
'personalization' => 'getPersonalization',
'banner' => 'getBanner',
'message' => 'getMessage',
'profile' => 'getProfile',
'appImage' => 'getAppImage'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['appleLogo'] = isset($data['appleLogo']) ? $data['appleLogo'] : null;
        $this->container['hero'] = isset($data['hero']) ? $data['hero'] : null;
        $this->container['eventStrip'] = isset($data['eventStrip']) ? $data['eventStrip'] : null;
        $this->container['strip'] = isset($data['strip']) ? $data['strip'] : null;
        $this->container['thumbnail'] = isset($data['thumbnail']) ? $data['thumbnail'] : null;
        $this->container['background'] = isset($data['background']) ? $data['background'] : null;
        $this->container['footer'] = isset($data['footer']) ? $data['footer'] : null;
        $this->container['security'] = isset($data['security']) ? $data['security'] : null;
        $this->container['privilege'] = isset($data['privilege']) ? $data['privilege'] : null;
        $this->container['airlineAlliance'] = isset($data['airlineAlliance']) ? $data['airlineAlliance'] : null;
        $this->container['personalization'] = isset($data['personalization']) ? $data['personalization'] : null;
        $this->container['banner'] = isset($data['banner']) ? $data['banner'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['appImage'] = isset($data['appImage']) ? $data['appImage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['icon'] === null) {
            $invalidProperties[] = "'icon' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon icon
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets appleLogo
     *
     * @return string
     */
    public function getAppleLogo()
    {
        return $this->container['appleLogo'];
    }

    /**
     * Sets appleLogo
     *
     * @param string $appleLogo appleLogo
     *
     * @return $this
     */
    public function setAppleLogo($appleLogo)
    {
        $this->container['appleLogo'] = $appleLogo;

        return $this;
    }

    /**
     * Gets hero
     *
     * @return string
     */
    public function getHero()
    {
        return $this->container['hero'];
    }

    /**
     * Sets hero
     *
     * @param string $hero hero
     *
     * @return $this
     */
    public function setHero($hero)
    {
        $this->container['hero'] = $hero;

        return $this;
    }

    /**
     * Gets eventStrip
     *
     * @return string
     */
    public function getEventStrip()
    {
        return $this->container['eventStrip'];
    }

    /**
     * Sets eventStrip
     *
     * @param string $eventStrip eventStrip
     *
     * @return $this
     */
    public function setEventStrip($eventStrip)
    {
        $this->container['eventStrip'] = $eventStrip;

        return $this;
    }

    /**
     * Gets strip
     *
     * @return string
     */
    public function getStrip()
    {
        return $this->container['strip'];
    }

    /**
     * Sets strip
     *
     * @param string $strip strip
     *
     * @return $this
     */
    public function setStrip($strip)
    {
        $this->container['strip'] = $strip;

        return $this;
    }

    /**
     * Gets thumbnail
     *
     * @return string
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     *
     * @param string $thumbnail thumbnail
     *
     * @return $this
     */
    public function setThumbnail($thumbnail)
    {
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }

    /**
     * Gets background
     *
     * @return string
     */
    public function getBackground()
    {
        return $this->container['background'];
    }

    /**
     * Sets background
     *
     * @param string $background background
     *
     * @return $this
     */
    public function setBackground($background)
    {
        $this->container['background'] = $background;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return string
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param string $footer footer
     *
     * @return $this
     */
    public function setFooter($footer)
    {
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets security
     *
     * @return string
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param string $security security
     *
     * @return $this
     */
    public function setSecurity($security)
    {
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets privilege
     *
     * @return string
     */
    public function getPrivilege()
    {
        return $this->container['privilege'];
    }

    /**
     * Sets privilege
     *
     * @param string $privilege privilege
     *
     * @return $this
     */
    public function setPrivilege($privilege)
    {
        $this->container['privilege'] = $privilege;

        return $this;
    }

    /**
     * Gets airlineAlliance
     *
     * @return string
     */
    public function getAirlineAlliance()
    {
        return $this->container['airlineAlliance'];
    }

    /**
     * Sets airlineAlliance
     *
     * @param string $airlineAlliance airlineAlliance
     *
     * @return $this
     */
    public function setAirlineAlliance($airlineAlliance)
    {
        $this->container['airlineAlliance'] = $airlineAlliance;

        return $this;
    }

    /**
     * Gets personalization
     *
     * @return string
     */
    public function getPersonalization()
    {
        return $this->container['personalization'];
    }

    /**
     * Sets personalization
     *
     * @param string $personalization personalization
     *
     * @return $this
     */
    public function setPersonalization($personalization)
    {
        $this->container['personalization'] = $personalization;

        return $this;
    }

    /**
     * Gets banner
     *
     * @return string
     */
    public function getBanner()
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param string $banner banner
     *
     * @return $this
     */
    public function setBanner($banner)
    {
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return string
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param string $profile profile
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets appImage
     *
     * @return string
     */
    public function getAppImage()
    {
        return $this->container['appImage'];
    }

    /**
     * Sets appImage
     *
     * @param string $appImage appImage
     *
     * @return $this
     */
    public function setAppImage($appImage)
    {
        $this->container['appImage'] = $appImage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
