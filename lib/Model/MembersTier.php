<?php
/**
 * MembersTier
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Members API
 *
 * The PassKit Members API lets you manage your membership programs and passes for Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 1.0-rc
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * MembersTier Class Doc Comment
 *
 * @category Class
 * @description Tier allows a company to override certain details in the program.
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembersTier implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'membersTier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'tierIndex' => 'int',
'name' => 'string',
'localizedName' => '\PkIo\Model\IoLocalizedString',
'secondaryTierName' => 'string',
'localizedSecondaryTierName' => '\PkIo\Model\IoLocalizedString',
'programId' => 'string',
'passTemplateId' => 'string',
'tierUpgradeMessage' => 'string',
'localizedTierUpgradeMessage' => '\PkIo\Model\IoLocalizedString',
'tierDowngradeMessage' => 'string',
'localizedTierDowngradeMessage' => '\PkIo\Model\IoLocalizedString',
'created' => '\DateTime',
'updated' => '\DateTime',
'pointsOverdrawn' => 'bool',
'secondaryPointsOverdrawn' => 'bool',
'expirySettings' => '\PkIo\Model\IoExpirySettings',
'timezone' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'tierIndex' => 'int64',
'name' => null,
'localizedName' => null,
'secondaryTierName' => null,
'localizedSecondaryTierName' => null,
'programId' => null,
'passTemplateId' => null,
'tierUpgradeMessage' => null,
'localizedTierUpgradeMessage' => null,
'tierDowngradeMessage' => null,
'localizedTierDowngradeMessage' => null,
'created' => 'date-time',
'updated' => 'date-time',
'pointsOverdrawn' => 'boolean',
'secondaryPointsOverdrawn' => 'boolean',
'expirySettings' => null,
'timezone' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'tierIndex' => 'tierIndex',
'name' => 'name',
'localizedName' => 'localizedName',
'secondaryTierName' => 'secondaryTierName',
'localizedSecondaryTierName' => 'localizedSecondaryTierName',
'programId' => 'programId',
'passTemplateId' => 'passTemplateId',
'tierUpgradeMessage' => 'tierUpgradeMessage',
'localizedTierUpgradeMessage' => 'localizedTierUpgradeMessage',
'tierDowngradeMessage' => 'tierDowngradeMessage',
'localizedTierDowngradeMessage' => 'localizedTierDowngradeMessage',
'created' => 'created',
'updated' => 'updated',
'pointsOverdrawn' => 'pointsOverdrawn',
'secondaryPointsOverdrawn' => 'secondaryPointsOverdrawn',
'expirySettings' => 'expirySettings',
'timezone' => 'timezone'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'tierIndex' => 'setTierIndex',
'name' => 'setName',
'localizedName' => 'setLocalizedName',
'secondaryTierName' => 'setSecondaryTierName',
'localizedSecondaryTierName' => 'setLocalizedSecondaryTierName',
'programId' => 'setProgramId',
'passTemplateId' => 'setPassTemplateId',
'tierUpgradeMessage' => 'setTierUpgradeMessage',
'localizedTierUpgradeMessage' => 'setLocalizedTierUpgradeMessage',
'tierDowngradeMessage' => 'setTierDowngradeMessage',
'localizedTierDowngradeMessage' => 'setLocalizedTierDowngradeMessage',
'created' => 'setCreated',
'updated' => 'setUpdated',
'pointsOverdrawn' => 'setPointsOverdrawn',
'secondaryPointsOverdrawn' => 'setSecondaryPointsOverdrawn',
'expirySettings' => 'setExpirySettings',
'timezone' => 'setTimezone'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'tierIndex' => 'getTierIndex',
'name' => 'getName',
'localizedName' => 'getLocalizedName',
'secondaryTierName' => 'getSecondaryTierName',
'localizedSecondaryTierName' => 'getLocalizedSecondaryTierName',
'programId' => 'getProgramId',
'passTemplateId' => 'getPassTemplateId',
'tierUpgradeMessage' => 'getTierUpgradeMessage',
'localizedTierUpgradeMessage' => 'getLocalizedTierUpgradeMessage',
'tierDowngradeMessage' => 'getTierDowngradeMessage',
'localizedTierDowngradeMessage' => 'getLocalizedTierDowngradeMessage',
'created' => 'getCreated',
'updated' => 'getUpdated',
'pointsOverdrawn' => 'getPointsOverdrawn',
'secondaryPointsOverdrawn' => 'getSecondaryPointsOverdrawn',
'expirySettings' => 'getExpirySettings',
'timezone' => 'getTimezone'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['tierIndex'] = isset($data['tierIndex']) ? $data['tierIndex'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['localizedName'] = isset($data['localizedName']) ? $data['localizedName'] : null;
        $this->container['secondaryTierName'] = isset($data['secondaryTierName']) ? $data['secondaryTierName'] : null;
        $this->container['localizedSecondaryTierName'] = isset($data['localizedSecondaryTierName']) ? $data['localizedSecondaryTierName'] : null;
        $this->container['programId'] = isset($data['programId']) ? $data['programId'] : null;
        $this->container['passTemplateId'] = isset($data['passTemplateId']) ? $data['passTemplateId'] : null;
        $this->container['tierUpgradeMessage'] = isset($data['tierUpgradeMessage']) ? $data['tierUpgradeMessage'] : null;
        $this->container['localizedTierUpgradeMessage'] = isset($data['localizedTierUpgradeMessage']) ? $data['localizedTierUpgradeMessage'] : null;
        $this->container['tierDowngradeMessage'] = isset($data['tierDowngradeMessage']) ? $data['tierDowngradeMessage'] : null;
        $this->container['localizedTierDowngradeMessage'] = isset($data['localizedTierDowngradeMessage']) ? $data['localizedTierDowngradeMessage'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['pointsOverdrawn'] = isset($data['pointsOverdrawn']) ? $data['pointsOverdrawn'] : null;
        $this->container['secondaryPointsOverdrawn'] = isset($data['secondaryPointsOverdrawn']) ? $data['secondaryPointsOverdrawn'] : null;
        $this->container['expirySettings'] = isset($data['expirySettings']) ? $data['expirySettings'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['tierIndex'] === null) {
            $invalidProperties[] = "'tierIndex' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['programId'] === null) {
            $invalidProperties[] = "'programId' can't be null";
        }
        if ($this->container['passTemplateId'] === null) {
            $invalidProperties[] = "'passTemplateId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Tier identifier (could just be: blue, gold, etc); needs to be lower case. Tier ID needs to be uique within the program.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets tierIndex
     *
     * @return int
     */
    public function getTierIndex()
    {
        return $this->container['tierIndex'];
    }

    /**
     * Sets tierIndex
     *
     * @param int $tierIndex Index of the tier; can be used for managing downgrades / upgrade messaging; needs to be unique within the program.
     *
     * @return $this
     */
    public function setTierIndex($tierIndex)
    {
        $this->container['tierIndex'] = $tierIndex;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of tier.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets localizedName
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedName()
    {
        return $this->container['localizedName'];
    }

    /**
     * Sets localizedName
     *
     * @param \PkIo\Model\IoLocalizedString $localizedName localizedName
     *
     * @return $this
     */
    public function setLocalizedName($localizedName)
    {
        $this->container['localizedName'] = $localizedName;

        return $this;
    }

    /**
     * Gets secondaryTierName
     *
     * @return string
     */
    public function getSecondaryTierName()
    {
        return $this->container['secondaryTierName'];
    }

    /**
     * Sets secondaryTierName
     *
     * @param string $secondaryTierName Name of the secondary reward tier.
     *
     * @return $this
     */
    public function setSecondaryTierName($secondaryTierName)
    {
        $this->container['secondaryTierName'] = $secondaryTierName;

        return $this;
    }

    /**
     * Gets localizedSecondaryTierName
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedSecondaryTierName()
    {
        return $this->container['localizedSecondaryTierName'];
    }

    /**
     * Sets localizedSecondaryTierName
     *
     * @param \PkIo\Model\IoLocalizedString $localizedSecondaryTierName localizedSecondaryTierName
     *
     * @return $this
     */
    public function setLocalizedSecondaryTierName($localizedSecondaryTierName)
    {
        $this->container['localizedSecondaryTierName'] = $localizedSecondaryTierName;

        return $this;
    }

    /**
     * Gets programId
     *
     * @return string
     */
    public function getProgramId()
    {
        return $this->container['programId'];
    }

    /**
     * Sets programId
     *
     * @param string $programId The program id that the tier belongs to.
     *
     * @return $this
     */
    public function setProgramId($programId)
    {
        $this->container['programId'] = $programId;

        return $this;
    }

    /**
     * Gets passTemplateId
     *
     * @return string
     */
    public function getPassTemplateId()
    {
        return $this->container['passTemplateId'];
    }

    /**
     * Sets passTemplateId
     *
     * @param string $passTemplateId Identifier of pass template which identifies design and data elements for this tier.
     *
     * @return $this
     */
    public function setPassTemplateId($passTemplateId)
    {
        $this->container['passTemplateId'] = $passTemplateId;

        return $this;
    }

    /**
     * Gets tierUpgradeMessage
     *
     * @return string
     */
    public function getTierUpgradeMessage()
    {
        return $this->container['tierUpgradeMessage'];
    }

    /**
     * Sets tierUpgradeMessage
     *
     * @param string $tierUpgradeMessage Notification to be shown when someone upgrades tier.
     *
     * @return $this
     */
    public function setTierUpgradeMessage($tierUpgradeMessage)
    {
        $this->container['tierUpgradeMessage'] = $tierUpgradeMessage;

        return $this;
    }

    /**
     * Gets localizedTierUpgradeMessage
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedTierUpgradeMessage()
    {
        return $this->container['localizedTierUpgradeMessage'];
    }

    /**
     * Sets localizedTierUpgradeMessage
     *
     * @param \PkIo\Model\IoLocalizedString $localizedTierUpgradeMessage localizedTierUpgradeMessage
     *
     * @return $this
     */
    public function setLocalizedTierUpgradeMessage($localizedTierUpgradeMessage)
    {
        $this->container['localizedTierUpgradeMessage'] = $localizedTierUpgradeMessage;

        return $this;
    }

    /**
     * Gets tierDowngradeMessage
     *
     * @return string
     */
    public function getTierDowngradeMessage()
    {
        return $this->container['tierDowngradeMessage'];
    }

    /**
     * Sets tierDowngradeMessage
     *
     * @param string $tierDowngradeMessage Notification to be shown when someone downgrades tier.
     *
     * @return $this
     */
    public function setTierDowngradeMessage($tierDowngradeMessage)
    {
        $this->container['tierDowngradeMessage'] = $tierDowngradeMessage;

        return $this;
    }

    /**
     * Gets localizedTierDowngradeMessage
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedTierDowngradeMessage()
    {
        return $this->container['localizedTierDowngradeMessage'];
    }

    /**
     * Sets localizedTierDowngradeMessage
     *
     * @param \PkIo\Model\IoLocalizedString $localizedTierDowngradeMessage localizedTierDowngradeMessage
     *
     * @return $this
     */
    public function setLocalizedTierDowngradeMessage($localizedTierDowngradeMessage)
    {
        $this->container['localizedTierDowngradeMessage'] = $localizedTierDowngradeMessage;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The date the tier was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The date the tier was updated.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets pointsOverdrawn
     *
     * @return bool
     */
    public function getPointsOverdrawn()
    {
        return $this->container['pointsOverdrawn'];
    }

    /**
     * Sets pointsOverdrawn
     *
     * @param bool $pointsOverdrawn Set true to accept a negative point balance. Default is false.
     *
     * @return $this
     */
    public function setPointsOverdrawn($pointsOverdrawn)
    {
        $this->container['pointsOverdrawn'] = $pointsOverdrawn;

        return $this;
    }

    /**
     * Gets secondaryPointsOverdrawn
     *
     * @return bool
     */
    public function getSecondaryPointsOverdrawn()
    {
        return $this->container['secondaryPointsOverdrawn'];
    }

    /**
     * Sets secondaryPointsOverdrawn
     *
     * @param bool $secondaryPointsOverdrawn Set true to accept a negative secondary point balance. Default is false.
     *
     * @return $this
     */
    public function setSecondaryPointsOverdrawn($secondaryPointsOverdrawn)
    {
        $this->container['secondaryPointsOverdrawn'] = $secondaryPointsOverdrawn;

        return $this;
    }

    /**
     * Gets expirySettings
     *
     * @return \PkIo\Model\IoExpirySettings
     */
    public function getExpirySettings()
    {
        return $this->container['expirySettings'];
    }

    /**
     * Sets expirySettings
     *
     * @param \PkIo\Model\IoExpirySettings $expirySettings expirySettings
     *
     * @return $this
     */
    public function setExpirySettings($expirySettings)
    {
        $this->container['expirySettings'] = $expirySettings;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Timezone string in IANA timezone format. If not provided defaults to Etc/UTC.
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
