<?php
/**
 * MembersProgram
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Members API
 *
 * The PassKit Members API lets you manage your membership programs and passes for Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 1.0-rc
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * MembersProgram Class Doc Comment
 *
 * @category Class
 * @description Membership Programs allow a company to control the business logic of their program.
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembersProgram implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'membersProgram';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'localizedName' => '\PkIo\Model\IoLocalizedString',
'status' => '\PkIo\Model\IoProjectStatus[]',
'quota' => '\PkIo\Model\IoQuota',
'passTypeIdentifier' => 'string',
'distributionSettings' => '\PkIo\Model\IoDistributionSettings',
'autoDeleteDaysAfterExpiry' => 'int',
'autoReminderDaysBeforeExpiry' => 'int',
'expiryMessage' => 'string',
'localizedExpiryMessage' => '\PkIo\Model\IoLocalizedString',
'autoDeleteDaysAfterNotInstalling' => 'int',
'callbacks' => 'map[string,\PkIo\Model\IoCallback]',
'pointsType' => '\PkIo\Model\MembersPointsType',
'secondaryPointsType' => '\PkIo\Model\MembersPointsType',
'metrics' => '\PkIo\Model\IoMetrics',
'metaFieldsList' => 'string[]',
'created' => '\DateTime',
'updated' => '\DateTime',
'profileImageSettings' => '\PkIo\Model\MembersProfileImageSetting'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'localizedName' => null,
'status' => null,
'quota' => null,
'passTypeIdentifier' => null,
'distributionSettings' => null,
'autoDeleteDaysAfterExpiry' => 'int64',
'autoReminderDaysBeforeExpiry' => 'int64',
'expiryMessage' => null,
'localizedExpiryMessage' => null,
'autoDeleteDaysAfterNotInstalling' => 'int64',
'callbacks' => null,
'pointsType' => null,
'secondaryPointsType' => null,
'metrics' => null,
'metaFieldsList' => null,
'created' => 'date-time',
'updated' => 'date-time',
'profileImageSettings' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'localizedName' => 'localizedName',
'status' => 'status',
'quota' => 'quota',
'passTypeIdentifier' => 'passTypeIdentifier',
'distributionSettings' => 'distributionSettings',
'autoDeleteDaysAfterExpiry' => 'autoDeleteDaysAfterExpiry',
'autoReminderDaysBeforeExpiry' => 'autoReminderDaysBeforeExpiry',
'expiryMessage' => 'expiryMessage',
'localizedExpiryMessage' => 'localizedExpiryMessage',
'autoDeleteDaysAfterNotInstalling' => 'autoDeleteDaysAfterNotInstalling',
'callbacks' => 'callbacks',
'pointsType' => 'pointsType',
'secondaryPointsType' => 'secondaryPointsType',
'metrics' => 'metrics',
'metaFieldsList' => 'metaFieldsList',
'created' => 'created',
'updated' => 'updated',
'profileImageSettings' => 'profileImageSettings'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'localizedName' => 'setLocalizedName',
'status' => 'setStatus',
'quota' => 'setQuota',
'passTypeIdentifier' => 'setPassTypeIdentifier',
'distributionSettings' => 'setDistributionSettings',
'autoDeleteDaysAfterExpiry' => 'setAutoDeleteDaysAfterExpiry',
'autoReminderDaysBeforeExpiry' => 'setAutoReminderDaysBeforeExpiry',
'expiryMessage' => 'setExpiryMessage',
'localizedExpiryMessage' => 'setLocalizedExpiryMessage',
'autoDeleteDaysAfterNotInstalling' => 'setAutoDeleteDaysAfterNotInstalling',
'callbacks' => 'setCallbacks',
'pointsType' => 'setPointsType',
'secondaryPointsType' => 'setSecondaryPointsType',
'metrics' => 'setMetrics',
'metaFieldsList' => 'setMetaFieldsList',
'created' => 'setCreated',
'updated' => 'setUpdated',
'profileImageSettings' => 'setProfileImageSettings'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'localizedName' => 'getLocalizedName',
'status' => 'getStatus',
'quota' => 'getQuota',
'passTypeIdentifier' => 'getPassTypeIdentifier',
'distributionSettings' => 'getDistributionSettings',
'autoDeleteDaysAfterExpiry' => 'getAutoDeleteDaysAfterExpiry',
'autoReminderDaysBeforeExpiry' => 'getAutoReminderDaysBeforeExpiry',
'expiryMessage' => 'getExpiryMessage',
'localizedExpiryMessage' => 'getLocalizedExpiryMessage',
'autoDeleteDaysAfterNotInstalling' => 'getAutoDeleteDaysAfterNotInstalling',
'callbacks' => 'getCallbacks',
'pointsType' => 'getPointsType',
'secondaryPointsType' => 'getSecondaryPointsType',
'metrics' => 'getMetrics',
'metaFieldsList' => 'getMetaFieldsList',
'created' => 'getCreated',
'updated' => 'getUpdated',
'profileImageSettings' => 'getProfileImageSettings'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['localizedName'] = isset($data['localizedName']) ? $data['localizedName'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['quota'] = isset($data['quota']) ? $data['quota'] : null;
        $this->container['passTypeIdentifier'] = isset($data['passTypeIdentifier']) ? $data['passTypeIdentifier'] : null;
        $this->container['distributionSettings'] = isset($data['distributionSettings']) ? $data['distributionSettings'] : null;
        $this->container['autoDeleteDaysAfterExpiry'] = isset($data['autoDeleteDaysAfterExpiry']) ? $data['autoDeleteDaysAfterExpiry'] : null;
        $this->container['autoReminderDaysBeforeExpiry'] = isset($data['autoReminderDaysBeforeExpiry']) ? $data['autoReminderDaysBeforeExpiry'] : null;
        $this->container['expiryMessage'] = isset($data['expiryMessage']) ? $data['expiryMessage'] : null;
        $this->container['localizedExpiryMessage'] = isset($data['localizedExpiryMessage']) ? $data['localizedExpiryMessage'] : null;
        $this->container['autoDeleteDaysAfterNotInstalling'] = isset($data['autoDeleteDaysAfterNotInstalling']) ? $data['autoDeleteDaysAfterNotInstalling'] : null;
        $this->container['callbacks'] = isset($data['callbacks']) ? $data['callbacks'] : null;
        $this->container['pointsType'] = isset($data['pointsType']) ? $data['pointsType'] : null;
        $this->container['secondaryPointsType'] = isset($data['secondaryPointsType']) ? $data['secondaryPointsType'] : null;
        $this->container['metrics'] = isset($data['metrics']) ? $data['metrics'] : null;
        $this->container['metaFieldsList'] = isset($data['metaFieldsList']) ? $data['metaFieldsList'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['profileImageSettings'] = isset($data['profileImageSettings']) ? $data['profileImageSettings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id PassKit generated program id (22 characters).
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the membership programs; will be shown on the enrolment page (if set) and issuer name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets localizedName
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedName()
    {
        return $this->container['localizedName'];
    }

    /**
     * Sets localizedName
     *
     * @param \PkIo\Model\IoLocalizedString $localizedName localizedName
     *
     * @return $this
     */
    public function setLocalizedName($localizedName)
    {
        $this->container['localizedName'] = $localizedName;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \PkIo\Model\IoProjectStatus[]
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \PkIo\Model\IoProjectStatus[] $status The program status (bitmask of ProjectStatus). Defaults to io.ProjectStatus.PROJECT_ACTIVE_FOR_OBJECT_CREATION + io.ProjectStatus.PROJECT_DRAFT.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets quota
     *
     * @return \PkIo\Model\IoQuota
     */
    public function getQuota()
    {
        return $this->container['quota'];
    }

    /**
     * Sets quota
     *
     * @param \PkIo\Model\IoQuota $quota quota
     *
     * @return $this
     */
    public function setQuota($quota)
    {
        $this->container['quota'] = $quota;

        return $this;
    }

    /**
     * Gets passTypeIdentifier
     *
     * @return string
     */
    public function getPassTypeIdentifier()
    {
        return $this->container['passTypeIdentifier'];
    }

    /**
     * Sets passTypeIdentifier
     *
     * @param string $passTypeIdentifier Leave empty for draft programs. Needs to be set for programs where status contains PROJECT_PUBLISHED.
     *
     * @return $this
     */
    public function setPassTypeIdentifier($passTypeIdentifier)
    {
        $this->container['passTypeIdentifier'] = $passTypeIdentifier;

        return $this;
    }

    /**
     * Gets distributionSettings
     *
     * @return \PkIo\Model\IoDistributionSettings
     */
    public function getDistributionSettings()
    {
        return $this->container['distributionSettings'];
    }

    /**
     * Sets distributionSettings
     *
     * @param \PkIo\Model\IoDistributionSettings $distributionSettings distributionSettings
     *
     * @return $this
     */
    public function setDistributionSettings($distributionSettings)
    {
        $this->container['distributionSettings'] = $distributionSettings;

        return $this;
    }

    /**
     * Gets autoDeleteDaysAfterExpiry
     *
     * @return int
     */
    public function getAutoDeleteDaysAfterExpiry()
    {
        return $this->container['autoDeleteDaysAfterExpiry'];
    }

    /**
     * Sets autoDeleteDaysAfterExpiry
     *
     * @param int $autoDeleteDaysAfterExpiry Auto deletes the member after `autoDeleteDaysAfterExpiry` days.
     *
     * @return $this
     */
    public function setAutoDeleteDaysAfterExpiry($autoDeleteDaysAfterExpiry)
    {
        $this->container['autoDeleteDaysAfterExpiry'] = $autoDeleteDaysAfterExpiry;

        return $this;
    }

    /**
     * Gets autoReminderDaysBeforeExpiry
     *
     * @return int
     */
    public function getAutoReminderDaysBeforeExpiry()
    {
        return $this->container['autoReminderDaysBeforeExpiry'];
    }

    /**
     * Sets autoReminderDaysBeforeExpiry
     *
     * @param int $autoReminderDaysBeforeExpiry Sets how many days before expiry to send a reminder lockscreen message to the member.
     *
     * @return $this
     */
    public function setAutoReminderDaysBeforeExpiry($autoReminderDaysBeforeExpiry)
    {
        $this->container['autoReminderDaysBeforeExpiry'] = $autoReminderDaysBeforeExpiry;

        return $this;
    }

    /**
     * Gets expiryMessage
     *
     * @return string
     */
    public function getExpiryMessage()
    {
        return $this->container['expiryMessage'];
    }

    /**
     * Sets expiryMessage
     *
     * @param string $expiryMessage The message to send to the user `autoReminderDaysBeforeExpiry` days before expiry.
     *
     * @return $this
     */
    public function setExpiryMessage($expiryMessage)
    {
        $this->container['expiryMessage'] = $expiryMessage;

        return $this;
    }

    /**
     * Gets localizedExpiryMessage
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedExpiryMessage()
    {
        return $this->container['localizedExpiryMessage'];
    }

    /**
     * Sets localizedExpiryMessage
     *
     * @param \PkIo\Model\IoLocalizedString $localizedExpiryMessage localizedExpiryMessage
     *
     * @return $this
     */
    public function setLocalizedExpiryMessage($localizedExpiryMessage)
    {
        $this->container['localizedExpiryMessage'] = $localizedExpiryMessage;

        return $this;
    }

    /**
     * Gets autoDeleteDaysAfterNotInstalling
     *
     * @return int
     */
    public function getAutoDeleteDaysAfterNotInstalling()
    {
        return $this->container['autoDeleteDaysAfterNotInstalling'];
    }

    /**
     * Sets autoDeleteDaysAfterNotInstalling
     *
     * @param int $autoDeleteDaysAfterNotInstalling Auto deletes the member `autoDeleteDaysAfterNotInstalling` days after the card has not been installed.
     *
     * @return $this
     */
    public function setAutoDeleteDaysAfterNotInstalling($autoDeleteDaysAfterNotInstalling)
    {
        $this->container['autoDeleteDaysAfterNotInstalling'] = $autoDeleteDaysAfterNotInstalling;

        return $this;
    }

    /**
     * Gets callbacks
     *
     * @return map[string,\PkIo\Model\IoCallback]
     */
    public function getCallbacks()
    {
        return $this->container['callbacks'];
    }

    /**
     * Sets callbacks
     *
     * @param map[string,\PkIo\Model\IoCallback] $callbacks Callbacks that are defined on program events. The key is the CallbackEvent ENUM.
     *
     * @return $this
     */
    public function setCallbacks($callbacks)
    {
        $this->container['callbacks'] = $callbacks;

        return $this;
    }

    /**
     * Gets pointsType
     *
     * @return \PkIo\Model\MembersPointsType
     */
    public function getPointsType()
    {
        return $this->container['pointsType'];
    }

    /**
     * Sets pointsType
     *
     * @param \PkIo\Model\MembersPointsType $pointsType pointsType
     *
     * @return $this
     */
    public function setPointsType($pointsType)
    {
        $this->container['pointsType'] = $pointsType;

        return $this;
    }

    /**
     * Gets secondaryPointsType
     *
     * @return \PkIo\Model\MembersPointsType
     */
    public function getSecondaryPointsType()
    {
        return $this->container['secondaryPointsType'];
    }

    /**
     * Sets secondaryPointsType
     *
     * @param \PkIo\Model\MembersPointsType $secondaryPointsType secondaryPointsType
     *
     * @return $this
     */
    public function setSecondaryPointsType($secondaryPointsType)
    {
        $this->container['secondaryPointsType'] = $secondaryPointsType;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return \PkIo\Model\IoMetrics
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param \PkIo\Model\IoMetrics $metrics metrics
     *
     * @return $this
     */
    public function setMetrics($metrics)
    {
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets metaFieldsList
     *
     * @return string[]
     */
    public function getMetaFieldsList()
    {
        return $this->container['metaFieldsList'];
    }

    /**
     * Sets metaFieldsList
     *
     * @param string[] $metaFieldsList A list of dynamic fields which can be used to filter members.
     *
     * @return $this
     */
    public function setMetaFieldsList($metaFieldsList)
    {
        $this->container['metaFieldsList'] = $metaFieldsList;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The date the program was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The date the program was updated.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets profileImageSettings
     *
     * @return \PkIo\Model\MembersProfileImageSetting
     */
    public function getProfileImageSettings()
    {
        return $this->container['profileImageSettings'];
    }

    /**
     * Sets profileImageSettings
     *
     * @param \PkIo\Model\MembersProfileImageSetting $profileImageSettings profileImageSettings
     *
     * @return $this
     */
    public function setProfileImageSettings($profileImageSettings)
    {
        $this->container['profileImageSettings'] = $profileImageSettings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
