<?php
/**
 * IoPassProtocol
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Members API
 *
 * The PassKit Members API lets you manage your membership programs and passes for Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 1.0-rc
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;
use \PkIo\ObjectSerializer;

/**
 * IoPassProtocol Class Doc Comment
 *
 * @category Class
 * @description - RAW_PROTOCOL: Reserved for v2 v3 legacy pass protocol.  - V1_PROTOCOL: Reserved for migrating legacy v1 passes.  - FLIGHT_PROTOCOL: Flights - mapped to Google&#x27;s boarding passes class.  - LOYALTY_PROTOCOL: Loyalty - mapped to Google&#x27;s loyalty class.  - EVENT_TICKET_PROTOCOL: Event Tickets; - mapped to Google&#x27;s event ticket class.  - COUPON_PROTOCOL: Coupons - mapped to Google&#x27;s offer class.  - STORED_VALUE_PROTOCOL: Stored Value - mapped to Google&#x27;s gift class.  - TRANSIT_VALUE_PROTOCOL: Stored Value - mapped to Google&#x27;s transit class.  - MEMBERSHIP: Values 100 onwards are for PassKit generic protocols. Generic Membership protocol  - SINGLE_USE_COUPON: Single Use Coupon protocol  - PROP_0001: Values 1000 onwards are for proprietary protocols Proprietary protocol.  - PROP_0002: Proprietary protocol.
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IoPassProtocol
{
    /**
     * Possible values of this enum
     */
    const PASS_PROTOCOL_DO_NOT_USE = 'PASS_PROTOCOL_DO_NOT_USE';
const RAW_PROTOCOL = 'RAW_PROTOCOL';
const V1_PROTOCOL = 'V1_PROTOCOL';
const FLIGHT_PROTOCOL = 'FLIGHT_PROTOCOL';
const LOYALTY_PROTOCOL = 'LOYALTY_PROTOCOL';
const EVENT_TICKET_PROTOCOL = 'EVENT_TICKET_PROTOCOL';
const COUPON_PROTOCOL = 'COUPON_PROTOCOL';
const STORED_VALUE_PROTOCOL = 'STORED_VALUE_PROTOCOL';
const TRANSIT_VALUE_PROTOCOL = 'TRANSIT_VALUE_PROTOCOL';
const MEMBERSHIP = 'MEMBERSHIP';
const SINGLE_USE_COUPON = 'SINGLE_USE_COUPON';
const PROP_0001 = 'PROP_0001';
const PROP_0002 = 'PROP_0002';
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::PASS_PROTOCOL_DO_NOT_USE,
self::RAW_PROTOCOL,
self::V1_PROTOCOL,
self::FLIGHT_PROTOCOL,
self::LOYALTY_PROTOCOL,
self::EVENT_TICKET_PROTOCOL,
self::COUPON_PROTOCOL,
self::STORED_VALUE_PROTOCOL,
self::TRANSIT_VALUE_PROTOCOL,
self::MEMBERSHIP,
self::SINGLE_USE_COUPON,
self::PROP_0001,
self::PROP_0002,        ];
    }
}
